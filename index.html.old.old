<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Registration for WVSSM</title>
  <link rel="manifest" href="manifest.json" />
  <meta name="theme-color" content="#0d6efd" />
  <link rel="apple-touch-icon" href="icons/icon-192.png" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/css/tom-select.css" rel="stylesheet" />
  <script src="https://unpkg.com/prefixfree@1.0.0/prefixfree.min.js"></script>
  <script src="https://wzrd.in/standalone/formdata-polyfill@latest"></script>
  <script src="https://wzrd.in/standalone/promise-polyfill@latest"></script>
  <script src="https://wzrd.in/standalone/whatwg-fetch@latest"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
  <style>
    .is-hidden { display: none !important; }
    .loading-spinner svg {
      width: 50px;
      height: 50px;
      stroke: #007bff;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .offline-banner {
      background-color: #ffc107;
      color: #000;
      text-align: center;
      padding: 8px;
      font-weight: 500;
      display: none;
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 1050;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .validation-error {
      color: #dc3545;
      font-size: 0.875em;
      margin-top: 0.25rem;
      display: none;
    }
    button:disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }
  </style>
</head>
<body class="bg-light">
  <div id="offlineBanner" class="offline-banner">
    ⚠️ You are currently offline. Submissions will be saved locally.
  </div>
  <div class="container my-5">
    <div class="row justify-content-center">
      <div class="col-lg-6 col-md-8 col-sm-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <div class="d-flex justify-content-center align-items-center mb-4 gap-2 flex-wrap">
              <div class="text-center">
                <h4 class="mb-1">Registration for WVSSM</h4>
                <small class="text-muted d-block">(Web-based Vaccination Supplies Stock Management)</small>
              </div>
              <div>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="40"
                  fill="none"
                  stroke="#007bff"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  viewBox="0 0 24 24"
                >
                  <circle cx="12" cy="7" r="4" />
                  <path d="M5.5 21a6.5 6.5 0 0 1 13 0" />
                </svg>
              </div>
            </div>

            <form name="submit-to-google-sheet" novalidate>
              <div class="mb-3">
                <label for="idNumber" class="form-label">ID Number</label>
                <input
                  type="text"
                  class="form-control"
                  id="idNumber"
                  name="idNumber"
                  required
                  autocomplete="off"
                />
              </div>

              <div class="mb-3">
                <label for="confirmIdNumber" class="form-label">Confirm ID Number</label>
                <input
                  type="text"
                  class="form-control"
                  id="confirmIdNumber"
                  name="confirmIdNumber"
                  required
                  autocomplete="off"
                />
                <div id="idNumberError" class="validation-error">ID Numbers do not match.</div>
              </div>

              <div class="mb-3">
                <label for="firstName" class="form-label">First Name</label>
                <input type="text" class="form-control" id="firstName" name="firstName" required />
              </div>

              <div class="mb-3">
                <label for="lastName" class="form-label">Last Name</label>
                <input type="text" class="form-control" id="lastName" name="lastName" required />
              </div>

              <div class="mb-3">
                <label for="jobTitle" class="form-label">Job Title</label>
                <select
                  id="jobTitle"
                  name="jobTitle"
                  placeholder="Select or type a job title..."
                  autocomplete="off"
                ></select>
              </div>

              <div class="mb-3">
                <label for="phone" class="form-label">Phone Number</label>
                <input
                  type="tel"
                  class="form-control"
                  id="phone"
                  name="phone"
                  required
                  autocomplete="off"
                />
              </div>

              <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" required />
              </div>

              <div class="mb-3">
                <label for="confirmEmail" class="form-label">Confirm Email</label>
                <input
                  type="email"
                  class="form-control"
                  id="confirmEmail"
                  name="confirmEmail"
                  required
                />
                <div id="emailError" class="validation-error">Emails do not match.</div>
              </div>

              <button type="submit" class="btn btn-primary w-100" disabled>Submit</button>
            </form>

            <div class="loading js-loading is-hidden text-center my-3">
              <div class="loading-spinner">
                <svg>
                  <circle
                    cx="25"
                    cy="25"
                    r="20"
                    fill="none"
                    stroke-width="4"
                    stroke-miterlimit="10"
                  />
                </svg>
              </div>
            </div>

            <p class="js-success-message text-success text-center is-hidden">
              ✅ Form submitted successfully!
            </p>
            <p class="js-error-message text-danger text-center is-hidden">
              ❌ Submission failed. Please try again.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/js/tom-select.complete.min.js"></script>
  <script>
    const ENCRYPTION_KEY = "WVSSM-Secret-Key-2025";
    const scriptURL =
      "https://script.google.com/macros/s/AKfycbydCXj-9_NWfsU1PKmeBgEqPZAJj0P9U40jc85FmgMQUXl0_jvNQKdvW4ezStCz9fA6/exec";
    const form = document.forms["submit-to-google-sheet"];
    const loading = document.querySelector(".js-loading");
    const successMessage = document.querySelector(".js-success-message");
    const errorMessage = document.querySelector(".js-error-message");
    const offlineBanner = document.getElementById("offlineBanner");
    const QUEUE_KEY = "wvssm_offline_queue";
    const submitBtn = form.querySelector('button[type="submit"]');
    const idNumberInput = form.idNumber;
    const confirmIdNumberInput = form.confirmIdNumber;
    const emailInput = form.email;
    const confirmEmailInput = form.confirmEmail;
    const idNumberError = document.getElementById("idNumberError");
    const emailError = document.getElementById("emailError");

    window.addEventListener("load", () => {
      updateOnlineStatus();
      tryResendQueuedForms();
      validateForm();
    });
    window.addEventListener("online", () => {
      updateOnlineStatus();
      tryResendQueuedForms();
    });
    window.addEventListener("offline", updateOnlineStatus);

    function updateOnlineStatus() {
      offlineBanner.style.display = navigator.onLine ? "none" : "block";
    }

    // Validate matching fields and enable/disable submit button
    function validateForm() {
      let valid = true;

      if (idNumberInput.value.trim() !== confirmIdNumberInput.value.trim()) {
        idNumberError.style.display = "block";
        valid = false;
      } else {
        idNumberError.style.display = "none";
      }

      if (emailInput.value.trim().toLowerCase() !== confirmEmailInput.value.trim().toLowerCase()) {
        emailError.style.display = "block";
        valid = false;
      } else {
        emailError.style.display = "none";
      }

      submitBtn.disabled = !valid;
    }

    // Add input event listeners to validate on the fly
    [idNumberInput, confirmIdNumberInput, emailInput, confirmEmailInput].forEach(input => {
      input.addEventListener("input", validateForm);
    });

    form.addEventListener("submit", (e) => {
      e.preventDefault();

      const idNumber = idNumberInput.value.trim();
      const confirmIdNumber = confirmIdNumberInput.value.trim();
      const email = emailInput.value.trim();
      const confirmEmail = confirmEmailInput.value.trim();

      // Final check on submit just in case
      if (idNumber !== confirmIdNumber) {
        alert("ID Number and Confirm ID Number do not match.");
        return;
      }

      if (email.toLowerCase() !== confirmEmail.toLowerCase()) {
        alert("Email and Confirm Email do not match.");
        return;
      }

      const formData = new FormData(form);

      if (navigator.onLine) {
        sendFormData(formData);
      } else {
        saveToOfflineQueue(formData);
        alert(
          "You are offline. Your submission has been saved and will be sent once you are online."
        );
        form.reset();
        validateForm(); // disable submit again after reset
      }
    });

    function sendFormData(formData) {
      loading.classList.remove("is-hidden");
      form.classList.add("is-hidden");
      fetch(scriptURL, { method: "POST", body: formData })
        .then((response) => {
          loading.classList.add("is-hidden");
          successMessage.classList.remove("is-hidden");
          errorMessage.classList.add("is-hidden");
          form.classList.remove("is-hidden");
          form.reset();
          validateForm(); // disable submit after reset
        })
        .catch((error) => {
          loading.classList.add("is-hidden");
          errorMessage.classList.remove("is-hidden");
          successMessage.classList.add("is-hidden");
          form.classList.remove("is-hidden");
          saveToOfflineQueue(formData);
        });
    }

    function saveToOfflineQueue(formData) {
      const dataObj = {};
      formData.forEach((value, key) => (dataObj[key] = value));
      const encrypted = CryptoJS.AES.encrypt(
        JSON.stringify(dataObj),
        ENCRYPTION_KEY
      ).toString();
      const queue = JSON.parse(localStorage.getItem(QUEUE_KEY)) || [];
      queue.push(encrypted);
      localStorage.setItem(QUEUE_KEY, JSON.stringify(queue));
    }

    function tryResendQueuedForms() {
      const queue = JSON.parse(localStorage.getItem(QUEUE_KEY)) || [];
      const remaining = [];
      queue.forEach((encrypted) => {
        try {
          const decrypted = CryptoJS.AES.decrypt(
            encrypted,
            ENCRYPTION_KEY
          ).toString(CryptoJS.enc.Utf8);
          const entry = JSON.parse(decrypted);
          const formData = new FormData();
          Object.keys(entry).forEach((key) => formData.append(key, entry[key]));
          fetch(scriptURL, { method: "POST", body: formData })
            .then(() => console.log("Queued form sent:", entry))
            .catch(() => remaining.push(encrypted));
        } catch (e) {
          console.error("Decryption error:", e);
        }
      });
      localStorage.setItem(QUEUE_KEY, JSON.stringify(remaining));
    }

    fetch(
      "https://script.google.com/macros/s/AKfycbwDSXKAUOg-PR1FUqZNTNEU1vFpn4Letcp7KGxdJLfZxb1xNVQ7hun4NPWwQIa1WhZu/exec"
    )
      .then((res) => res.json())
      .then((jobTitles) => {
        const options = jobTitles.map((title) => ({ value: title, text: title }));
        new TomSelect("#jobTitle", {
          options,
          create: true,
          sortField: { field: "text", direction: "asc" },
        });
      })
      .catch(() => new TomSelect("#jobTitle", { create: true }));
  </script>
</body>
</html>
